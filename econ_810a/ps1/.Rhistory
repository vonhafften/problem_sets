library(tidyverse)
library(knitr)
library(markovchain)
library(Rtauchen)
ar(log(data$consumption), order.max = 1, method = "ols")
getwd()
ar(log(data$consumption), order.max = 1, method = "mle")
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(tis)
library(tidyverse)
library(knitr)
library(markovchain)
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(tis)
library(tidyverse)
library(knitr)
library(markovchain)
# Solves for equilibrium pricing function
# states is n length vector
# q is n by n matrix of transition probabilities
solve_lucas <- function(states, q, beta, initial_guess) {
n <- length(states)
# Initial guess for pricing function
p <- rep(initial_guess, n)
# Setup iteration variables
tolerence <- 1e-8
iter <- 1
max_iter <- 10000
# Create history (for plotting)
history <- matrix(0, nrow = max_iter, ncol = n)
# Iterate until convergence or maximum iterations is reached
while(TRUE) {
# tp is the pricing function after the Bellman operator is applied.
tp <- rep(0, n)
# Apply Bellman operator for each current and for each future state
for (i in 1:n) {
for (j in 1:n) {
tp[i] <- tp[i] +
beta * (states[i] / states[j]) * (p[j] + states[j]) * q[i, j]
}
}
# Update history
history[iter, ] <- t(p)
# Break from loop if pricing function converged
if (max(abs(p - tp)) < tolerence) break
# Break from loop if maximum iteration is reached
if (iter >= max_iter) break
# update guess
p <- tp
iter <- iter + 1
}
# Trim history
history <- history[1:iter, ]
return(list(p=p, iter=iter, history=history))
}
ex1 <- solve_lucas(states = c(2, 1),
q = matrix(c(.8, .2, .2, .8),
nrow = 2, ncol = 2),
beta = 0.9,
initial_guess = 0)
print(ex1$p)
print(ex1$iter)
plot(1, type = "n",
xlim = c(0, ex1$iter),
ylim = c(min(ex1$history), max(ex1$history)),
xlab = "Number of Iterations",
ylab = "q(z)")
lines(ex1$history[,1])
lines(ex1$history[,2], lty =2)
points(y = ex1$history[1,], x= c(1, 1), pch = 8)
text(rep("Initial guess", 2), y = ex1$history[1,], x= c(1, 1), pos = 4)
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(tis)
library(tidyverse)
library(knitr)
library(markovchain)
# Solves for equilibrium pricing function
# states is n length vector
# q is n by n matrix of transition probabilities
solve_lucas <- function(states, q, beta, initial_guess) {
n <- length(states)
# Initial guess for pricing function
p <- rep(initial_guess, n)
# Setup iteration variables
tolerence <- 1e-8
iter <- 1
max_iter <- 10000
# Create history (for plotting)
history <- matrix(0, nrow = max_iter, ncol = n)
# Iterate until convergence or maximum iterations is reached
while(TRUE) {
# tp is the pricing function after the Bellman operator is applied.
tp <- rep(0, n)
# Apply Bellman operator for each current and for each future state
for (i in 1:n) {
for (j in 1:n) {
tp[i] <- tp[i] +
beta * (states[i] / states[j]) * (p[j] + states[j]) * q[i, j]
}
}
# Update history
history[iter, ] <- t(p)
# Break from loop if pricing function converged
if (max(abs(p - tp)) < tolerence) break
# Break from loop if maximum iteration is reached
if (iter >= max_iter) break
# update guess
p <- tp
iter <- iter + 1
}
# Trim history
history <- history[1:iter, ]
return(list(p=p, iter=iter, history=history))
}
ex1 <- solve_lucas(states = c(2, 1),
q = matrix(c(.8, .2, .2, .8),
nrow = 2, ncol = 2),
beta = 0.9,
initial_guess = 0)
print(ex1$p)
print(ex1$iter)
plot(1, type = "n",
xlim = c(0, ex1$iter),
ylim = c(min(ex1$history), max(ex1$history)),
xlab = "Number of Iterations",
ylab = "p(s)")
lines(ex1$history[,1])
lines(ex1$history[,2], lty =2)
points(y = ex1$history[1,], x= c(1, 1), pch = 8)
text(rep("Initial guess", 2), y = ex1$history[1,], x= c(1, 1), pos = 4)
print(ex1$p)
print(ex1$iter)
plot(1, type = "n",
xlim = c(0, ex1$iter),
ylim = c(min(ex1$history), max(ex1$history)),
xlab = "Number of Iterations",
ylab = "q(z)")
lines(ex1$history[,1])
lines(ex1$history[,2], lty =2)
points(y = ex1$history[1,], x= c(1, 1), pch = 8)
text(rep("Initial guess", 2), y = ex1$history[1,], x= c(1, 1), pos = 4)
solve_lucas([2.0, 1.0], [0.8 0.2; 0.2 0.8], 0.95, 0.0)
ex3 <- solve_lucas(states = c(2, 1),
q = matrix(c(.8, .2, .2, .8),
nrow = 2, ncol = 2),
beta = 0.95,
initial_guess = 0)
print(ex3$p)
print(ex3$iter)
plot(1, type = "n",
xlim = c(0, max(ex1$iter, ex3$iter)),
ylim = c(min(c(ex1$history, ex3$history)), max(c(ex1$history, ex3$history))),
xlab = "Number of Iterations",
ylab = "p(s)")
lines(ex1$history[,1], col = "blue")
lines(ex1$history[,2], col = "blue", lty = 2)
lines(ex3$history[,1], col = "red")
lines(ex3$history[,2], col = "red", lty = 2)
text("beta = .9", y = mean(ex2$history[ex2$iter, ]), x= ex2$iter/2, col = "blue")
load("data.RData")
ex4 <- solve_lucas(states = consumption_summary$consumption,
q = transition_matrix,
beta = .95,
initial_guess = 2000000)
consumption_summary <- data %>%
group_by(recession) %>%
summarise(consumption = round(mean(consumption)))
library(haven)
library(tidyverse)
library(plm)
setwd("/Users/alexandervonhafften/Documents/UW Madison/problem_sets/econ_810a/ps1/")
psid <- read_dta("pequiv_long.dta")
# sample
# between 1978 and 1997
# between 25 and 60 (=25+35)
# income between 1000 and 150,000
sample <- psid %>%
transmute(id = x11101LL,
year,
age = d11101,
cohort = year - age,
income = i11103,
is_seo = x11104LL == 12) %>%
filter(year >= 1978,
year <= 1997,
!is_seo,
age >= 25,
age <= 25 + 34,
income >= 1000,
income <= 1000*150)
# Estimate fixed effects for age and cohort
ols <- sample %>%
lm(log(income) ~ factor(age) + factor(cohort), data = .)
# pull out age and cohort fixed effects
age_profile <- c(0, unname(ols$coefficients[2:35]))
cohort_profile <- c(0, unname(ols$coefficients[36:89]))
# plot age and cohort fixed effects
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)")
plot(y = cohort_profile, x = 1918:1972, xlab = "Cohort", ylab = "log(income)")
# save age profile for use in model
write_csv(tibble(log_income = age_profile+ols$coefficients[1]), "age_profile.csv")
library(haven)
library(tidyverse)
library(plm)
setwd("/Users/alexandervonhafften/Documents/UW Madison/problem_sets/econ_810a/ps1/")
psid <- read_dta("pequiv_long.dta")
# sample
# between 1978 and 1997
# between 25 and 60 (=25+35)
# income between 1000 and 150,000
sample <- psid %>%
transmute(id = x11101LL,
year,
age = d11101,
cohort = year - age,
income = i11103,
is_seo = x11104LL == 12) %>%
filter(year >= 1978,
year <= 1997,
!is_seo,
age >= 25,
age <= 25 + 34,
income >= 1000,
income <= 1000*150)
View(sample)
min(sample$cohort)
max(sample$cohort)
# sample
# between 1978 and 1997
# between 25 and 60 (=25+35)
# income between 1000 and 150,000
sample <- psid %>%
transmute(id = x11101LL,
year,
age = d11101,
cohort = year - age,
income = i11103,
is_seo = x11104LL == 12) %>%
filter(year >= 1978,
year <= 1997,
!is_seo,
age >= 25,
age <= 25 + 34,
income >= 1000,
income <=1000*150)
# Estimate fixed effects for age and cohort
ols <- sample %>%
lm(log(income) ~ factor(age) + factor(cohort), data = .)
# pull out age and cohort fixed effects
age_profile <- c(0, unname(ols$coefficients[2:35]))
cohort_profile <- c(0, unname(ols$coefficients[36:89]))
# plot age and cohort fixed effects
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)")
# plot age and cohort fixed effects
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)")
# plot age and cohort fixed effects
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)")
plot(y = cohort_profile, x = 1918:1972, xlab = "Cohort", ylab = "log(income)")
# save age profile for use in model
write_csv(tibble(log_income = age_profile+ols$coefficients[1]), "age_profile.csv")
sample_2 <- cbind(sample, y = ols$residuals)
sample_3 <- pdata.frame(sample_2, index = c("id", "year")) # use panel data structure for lags and leads
rho <- 0.97 # AR parameter
delta_y_tilde <- sample_3$y - rho*lag(sample_3$y) # find pseudo difference
# Formulas slide 79 of carters presentation
var_epsilon <- -(1/rho)*cov(delta_y_tilde, lead(delta_y_tilde), use = "complete.obs")
var_zeta <- (1/rho)*cov(delta_y_tilde, rho^2 * lag(delta_y_tilde) + rho*delta_y_tilde + lead(delta_y_tilde), use = "complete.obs")
print(var_epsilon)
print(var_zeta)
psid$income
psid$i11103
quantile(psid$i11103, probs = c(0.01, 0.99))
quantile(psid$i11103, probs = c(0.01, 0.99), na.rm = TRUE)
quantile(psid$i11103, probs = c(0.05, 0.95), na.rm = TRUE)
quantile(psid$i11103, probs = c(0.1, 0.9), na.rm = TRUE)
# sample
# between 1978 and 1997
# between 25 and 60 (=25+35)
# income between 1000 and 150,000
sample <- psid %>%
transmute(id = x11101LL,
year,
age = d11101,
cohort = year - age,
income = i11103,
is_seo = x11104LL == 12) %>%
filter(year >= 1978,
year <= 1997,
!is_seo,
age >= 25,
age <= 25 + 34)
quantile(sample, probs = c(0.01, 0.99))
quantile(sample, probs = c(0.01, 0.99), na.rm=TRUE)
quantile(sample, probs = c(0.05, 0.95), na.rm=TRUE)
quantile(sample, probs = c(0.1, 0.95), na.rm=TRUE)
quantile(sample, probs = c(0.15, 0.95), na.rm=TRUE)
quantile(sample, probs = c(0.20, 0.95), na.rm=TRUE)
# sample
# between 1978 and 1997
# between 25 and 60 (=25+35)
# income between 1000 and 150,000
sample <- psid %>%
transmute(id = x11101LL,
year,
age = d11101,
cohort = year - age,
income = i11103,
is_seo = x11104LL == 12) %>%
filter(year >= 1978,
year <= 1997,
!is_seo,
age >= 25,
age <= 25 + 34,
income > 0)
quantile(sample, probs = c(0.05, 0.95), na.rm=TRUE)
# sample
# between 1978 and 1997
# between 25 and 60 (=25+35)
# income between 1000 and 150,000
sample <- psid %>%
transmute(id = x11101LL,
year,
age = d11101,
cohort = year - age,
income = i11103,
is_seo = x11104LL == 12) %>%
filter(year >= 1978,
year <= 1997,
!is_seo,
age >= 25,
age <= 25 + 34,
income > 0)
quantile(sample, probs = c(0.05, 0.95), na.rm=TRUE)
quantile(sample$income, probs = c(0.01, 0.95), na.rm=TRUE)
# sample
# between 1978 and 1997
# between 25 and 60 (=25+35)
# income between 1000 and 150,000
sample <- psid %>%
transmute(id = x11101LL,
year,
age = d11101,
cohort = year - age,
income = i11103,
is_seo = x11104LL == 12) %>%
filter(year >= 1978,
year <= 1997,
!is_seo,
age >= 25,
age <= 25 + 34)
quantile(sample$income, probs = c(0.01, 0.99), na.rm=TRUE)
quantile(sample$income, probs = c(0.05, 0.95), na.rm=TRUE)
# sample
# between 1978 and 1997
# between 25 and 60 (=25+35)
# income between 1000 and 150,000
sample <- psid %>%
transmute(id = x11101LL,
year,
age = d11101,
cohort = year - age,
income = i11103,
is_seo = x11104LL == 12) %>%
filter(year >= 1978,
year <= 1997,
!is_seo,
age >= 25,
age <= 25 + 34,
income > 0)
quantile(sample$income, probs = c(0.01, 0.99), na.rm=TRUE)
sample <- sample %>%
filter(income >= 1000,
income <=1000*150)
sample <- sample %>%
filter(income >= 1200.0,
income <= 170930.3)
# Estimate fixed effects for age and cohort
ols <- sample %>%
lm(log(income) ~ factor(age) + factor(cohort), data = .)
# pull out age and cohort fixed effects
age_profile <- c(0, unname(ols$coefficients[2:35]))
cohort_profile <- c(0, unname(ols$coefficients[36:89]))
# plot age and cohort fixed effects
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)")
plot(y = cohort_profile, x = 1918:1972, xlab = "Cohort", ylab = "log(income)")
# save age profile for use in model
write_csv(tibble(log_income = age_profile+ols$coefficients[1]), "age_profile.csv")
sample_2 <- cbind(sample, y = ols$residuals)
sample_3 <- pdata.frame(sample_2, index = c("id", "year")) # use panel data structure for lags and leads
rho <- 0.97 # AR parameter
delta_y_tilde <- sample_3$y - rho*lag(sample_3$y) # find pseudo difference
# Formulas slide 79 of carters presentation
var_epsilon <- -(1/rho)*cov(delta_y_tilde, lead(delta_y_tilde), use = "complete.obs")
var_zeta <- (1/rho)*cov(delta_y_tilde, rho^2 * lag(delta_y_tilde) + rho*delta_y_tilde + lead(delta_y_tilde), use = "complete.obs")
print(var_epsilon)
print(var_zeta)
sample <- sample %>%
filter(income >= 1200.0,
income <= 170000)
# Estimate fixed effects for age and cohort
ols <- sample %>%
lm(log(income) ~ factor(age) + factor(cohort), data = .)
# pull out age and cohort fixed effects
age_profile <- c(0, unname(ols$coefficients[2:35]))
cohort_profile <- c(0, unname(ols$coefficients[36:89]))
# plot age and cohort fixed effects
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)")
plot(y = cohort_profile, x = 1918:1972, xlab = "Cohort", ylab = "log(income)")
# save age profile for use in model
write_csv(tibble(log_income = age_profile+ols$coefficients[1]), "age_profile.csv")
sample_2 <- cbind(sample, y = ols$residuals)
sample_3 <- pdata.frame(sample_2, index = c("id", "year")) # use panel data structure for lags and leads
rho <- 0.97 # AR parameter
delta_y_tilde <- sample_3$y - rho*lag(sample_3$y) # find pseudo difference
# Formulas slide 79 of carters presentation
var_epsilon <- -(1/rho)*cov(delta_y_tilde, lead(delta_y_tilde), use = "complete.obs")
var_zeta <- (1/rho)*cov(delta_y_tilde, rho^2 * lag(delta_y_tilde) + rho*delta_y_tilde + lead(delta_y_tilde), use = "complete.obs")
print(var_epsilon)
print(var_zeta)
# pull out age and cohort fixed effects
age_profile <- c(0, unname(ols$coefficients[2:35] + ols$coefficients[1]))
cohort_profile <- c(0, unname(ols$coefficients[36:89]))
# plot age and cohort fixed effects
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)")
# pull out age and cohort fixed effects
age_profile <- c(0, unname(ols$coefficients[1] + ols$coefficients[2:35]))
cohort_profile <- c(0, unname(ols$coefficients[36:89]))
# plot age and cohort fixed effects
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)")
ols
# pull out age and cohort fixed effects
age_profile <- ols$coefficients[1] +c(0, unname( ols$coefficients[2:35]))
cohort_profile <- c(0, unname(ols$coefficients[36:89]))
# plot age and cohort fixed effects
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)")
plot(y = cohort_profile, x = 1918:1972, xlab = "Cohort", ylab = "log(income)")
# save age profile for use in model
write_csv(tibble(log_income = age_profile+ols$coefficients[1]), "age_profile.csv")
sample_2 <- cbind(sample, y = ols$residuals)
sample_3 <- pdata.frame(sample_2, index = c("id", "year")) # use panel data structure for lags and leads
rho <- 0.97 # AR parameter
delta_y_tilde <- sample_3$y - rho*lag(sample_3$y) # find pseudo difference
# Formulas slide 79 of carters presentation
var_epsilon <- -(1/rho)*cov(delta_y_tilde, lead(delta_y_tilde), use = "complete.obs")
var_zeta <- (1/rho)*cov(delta_y_tilde, rho^2 * lag(delta_y_tilde) + rho*delta_y_tilde + lead(delta_y_tilde), use = "complete.obs")
print(var_epsilon)
print(var_zeta)
png("age.png")
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)")
dev.off()
png("cohort.png")
plot(y = cohort_profile, x = 1918:1972, xlab = "Cohort", ylab = "log(income)")
dev.off()
# pull out age and cohort fixed effects
age_profile <- c(0, unname( ols$coefficients[2:35]))
cohort_profile <- c(0, unname(ols$coefficients[36:89]))
# plot age and cohort fixed effects
png("age.png")
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)")
dev.off()
png("cohort.png")
plot(y = cohort_profile, x = 1918:1972, xlab = "Cohort", ylab = "log(income)")
dev.off()
# save age profile for use in model
write_csv(tibble(log_income = age_profile+ols$coefficients[1]), "age_profile.csv")
# pull out age and cohort fixed effects
age_profile <- ols$coefficients[1] +c(0, unname( ols$coefficients[2:35]))
cohort_profile <- c(0, unname(ols$coefficients[36:89]))
# plot age and cohort fixed effects
png("age.png")
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)")
dev.off()
png("cohort.png")
plot(y = cohort_profile, x = 1918:1972, xlab = "Cohort", ylab = "log(income)")
dev.off()
# save age profile for use in model
write_csv(tibble(log_income = age_profile+ols$coefficients[1]), "age_profile.csv")
# save age profile for use in model
write_csv(tibble(log_income = age_profile), "age_profile.csv")
# pull out age and cohort fixed effects
age_profile <- c(0, unname( ols$coefficients[2:35]))
cohort_profile <- c(0, unname(ols$coefficients[36:89]))
# plot age and cohort fixed effects
png("age.png")
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)")
dev.off()
png("cohort.png")
plot(y = cohort_profile, x = 1918:1972, xlab = "Cohort", ylab = "log(income)")
dev.off()
# save age profile for use in model
write_csv(tibble(log_income = age_profile), "age_profile.csv")
# save age profile for use in model
write_csv(tibble(log_income = age_profile + ols$coefficients[1]), "age_profile.csv")
ols$coefficients[1]
ols
min(sample$cohort)
png("age.png")
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)", title = "Life-Cycle Components")
dev.off()
png("cohort.png")
plot(y = cohort_profile, x = 1918:1972, xlab = "Cohort", ylab = "log(income)", title = "Cohort Components")
dev.off()
# plot age and cohort fixed effects
png("age.png")
plot(y = age_profile, x = 25:(25+34), xlab = "Age", ylab = "log(income)", main = "Life-Cycle Components")
dev.off()
png("cohort.png")
plot(y = cohort_profile, x = 1918:1972, xlab = "Cohort", ylab = "log(income)", main = "Cohort Components")
dev.off()
